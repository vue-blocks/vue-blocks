{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "login5",
  "type": "registry:block",
  "title": "login",
  "dependencies": [
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "button",
    "alert",
    "pin-input"
  ],
  "files": [
    {
      "path": "app/registry/blocks/login/login5/Login5.vue",
      "content": "<template>\n    <section class=\"relative w-full flex items-center bg-background py-8 md:py-16 lg:py-24\">\n        <div class=\"container mx-auto px-4 md:px-6 lg:px-8\">\n            <div class=\"max-w-md mx-auto space-y-8\">\n                <div class=\"flex flex-col items-center space-y-2 text-center\">\n                    <div class=\"p-3 rounded-full bg-primary/10\">\n                        <ShieldCheckIcon class=\"h-12 w-12 text-primary\" />\n                    </div>\n                    <h1 class=\"text-3xl font-bold\">\n                        Two-step verification\n                    </h1>\n                    <p class=\"text-muted-foreground\">\n                        Enter the 6-digit code sent to your email address.\n                    </p>\n                </div>\n\n                <form\n                    class=\"space-y-6\"\n                    @submit.prevent\n                >\n                    <div class=\"space-y-4 flex justify-center\">\n                        <PinInput\n                            id=\"pin-input\"\n                            v-model=\"code\"\n                            placeholder=\"â—‹\"\n                            @complete=\"handleComplete\"\n                        >\n                            <PinInputGroup>\n                                <PinInputSlot\n                                    v-for=\"index in 6\"\n                                    :key=\"index\"\n                                    :index=\"index - 1\"\n                                    class=\"w-12 h-12 text-xl font-medium uppercase\"\n                                />\n                            </PinInputGroup>\n                        </PinInput>\n                    </div>\n\n                    <Alert\n                        v-if=\"error\"\n                        variant=\"destructive\"\n                    >\n                        <AlertDescription>{{ error }}</AlertDescription>\n                    </Alert>\n\n                    <Button\n                        :disabled=\"isLoading || code.length !== 6\"\n                        class=\"w-full\"\n                        type=\"submit\"\n                    >\n                        <template v-if=\"isLoading\">\n                            <Loader2 class=\"mr-2 h-4 w-4 animate-spin\" />\n                            Please wait\n                        </template>\n                        <template v-else>\n                            Verify code\n                        </template>\n                    </Button>\n                </form>\n\n                <div class=\"space-y-4\">\n                    <p class=\"text-center text-sm text-muted-foreground\">\n                        <span\n                            v-if=\"timeLeft > 0\"\n                            class=\"flex items-center justify-center gap-1\"\n                        >\n                            <ClockIcon class=\"h-4 w-4\" />\n                            Resend code in {{ timeLeft }}s\n                        </span>\n                        <button\n                            v-else\n                            class=\"text-primary hover:text-primary/80\"\n                            @click=\"handleResend\"\n                        >\n                            Resend code\n                        </button>\n                    </p>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ClockIcon, Loader2, ShieldCheckIcon } from 'lucide-vue-next'\nimport { PinInput, PinInputGroup, PinInputSlot } from '@/components/ui/pin-input'\n\nconst code = ref<string[]>([])\nconst error = ref('')\nconst timeLeft = ref(30)\nconst isLoading = ref(false)\n\nconst handleComplete = async (value: string[]) => {\n    if (value.length === 6) {\n        try {\n            isLoading.value = true\n            // Simulate API call\n            await new Promise(resolve => setTimeout(resolve, 2000))\n\n            console.log('Code submitted:', value.join(''))\n        }\n        catch (error) {\n            console.error('Verification error:', error)\n        }\n        finally {\n            isLoading.value = false\n        }\n    }\n}\n\nconst handleResend = () => {\n    timeLeft.value = 30\n    const timer = setInterval(() => {\n        timeLeft.value--\n        if (timeLeft.value === 0) {\n            clearInterval(timer)\n        }\n    }, 1000)\n}\n</script>\n",
      "type": "registry:block"
    }
  ]
}
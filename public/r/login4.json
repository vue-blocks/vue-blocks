{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "login4",
  "type": "registry:block",
  "title": "login",
  "dependencies": [
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "alert"
  ],
  "files": [
    {
      "path": "app/registry/blocks/login/login4/Login4.vue",
      "content": "<template>\n    <section class=\"relative w-full flex items-center bg-white py-8 md:py-16 lg:py-24\">\n        <div class=\"container mx-auto px-4 md:px-6 lg:px-8\">\n            <div class=\"max-w-md mx-auto\">\n                <Button\n                    v-if=\"submitted\"\n                    variant=\"ghost\"\n                    class=\"mb-6\"\n                    @click=\"handleBack\"\n                >\n                    <ArrowLeftIcon class=\"mr-2 h-4 w-4\" />\n                    Back to reset password\n                </Button>\n\n                <div\n                    v-if=\"!submitted\"\n                    class=\"space-y-8\"\n                >\n                    <div class=\"space-y-2\">\n                        <h1 class=\"text-3xl font-bold\">\n                            Reset password\n                        </h1>\n                        <p class=\"text-gray-500\">\n                            Enter your email address and we'll send you instructions to reset your password.\n                        </p>\n                    </div>\n\n                    <Alert\n                        v-if=\"error\"\n                        variant=\"destructive\"\n                    >\n                        <AlertCircleIcon class=\"h-4 w-4\" />\n                        <AlertTitle>Error</AlertTitle>\n                        <AlertDescription>{{ error }}</AlertDescription>\n                    </Alert>\n\n                    <Alert\n                        v-if=\"errors.email\"\n                        variant=\"destructive\"\n                    >\n                        <AlertCircleIcon class=\"h-4 w-4\" />\n                        <AlertTitle>Error</AlertTitle>\n                        <AlertDescription>{{ errors.email }}</AlertDescription>\n                    </Alert>\n\n                    <form\n                        class=\"space-y-6\"\n                        @submit.prevent=\"handleSubmit\"\n                    >\n                        <div class=\"space-y-2\">\n                            <Label for=\"email\">Email address</Label>\n                            <div class=\"relative\">\n                                <MailIcon class=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                                <Input\n                                    id=\"email\"\n                                    v-model=\"formData.email\"\n                                    type=\"email\"\n                                    placeholder=\"Enter your email\"\n                                    :class=\"{ 'border-destructive': errors.email }\"\n                                    class=\"pl-10\"\n                                    required\n                                />\n                            </div>\n                            <p\n                                v-if=\"errors.email\"\n                                class=\"text-sm text-destructive\"\n                            >\n                                {{ errors.email }}\n                            </p>\n                        </div>\n\n                        <Button\n                            type=\"submit\"\n                            class=\"w-full\"\n                            :disabled=\"isLoading\"\n                        >\n                            <template v-if=\"isLoading\">\n                                <Loader2 class=\"mr-2 h-4 w-4 animate-spin\" />\n                                Please wait\n                            </template>\n                            <template v-else>\n                                Send reset instructions\n                            </template>\n                        </Button>\n                    </form>\n\n                    <p class=\"text-center text-sm text-gray-500\">\n                        Remember your password?\n                        <a\n                            href=\"#\"\n                            class=\"text-blue-600 hover:underline\"\n                        >Sign in</a>\n                    </p>\n                </div>\n\n                <div\n                    v-else\n                    class=\"space-y-6\"\n                >\n                    <Alert>\n                        <CheckCircleIcon class=\"h-4 w-4\" />\n                        <AlertTitle>Check your email</AlertTitle>\n                        <AlertDescription>\n                            We've sent password reset instructions to {{ email }}. Please check your inbox and follow the instructions\n                            to\n                            reset your password.\n                        </AlertDescription>\n                    </Alert>\n\n                    <div class=\"space-y-4\">\n                        <p class=\"text-sm text-gray-500\">\n                            Didn't receive the email? Check your spam folder or\n                            <button\n                                class=\"text-blue-600 hover:underline\"\n                                @click=\"handleBack\"\n                            >\n                                try another email address\n                            </button>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport { MailIcon, AlertCircleIcon, CheckCircleIcon, ArrowLeftIcon, Loader2 } from 'lucide-vue-next'\n\nconst email = ref('user@vue-blocks.dev')\nconst submitted = ref(false)\nconst error = ref('')\n\nconst formData = reactive({\n    email: email.value,\n})\n\nconst errors = reactive({\n    email: '',\n})\n\nconst isLoading = ref(false)\n\nconst validateForm = () => {\n    let isValid = true\n\n    // Reset errors\n    errors.email = ''\n\n    // Email validation\n    if (!formData.email) {\n        errors.email = 'Email is required'\n        isValid = false\n    }\n    else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n        errors.email = 'Please enter a valid email address'\n        isValid = false\n    }\n\n    return isValid\n}\n\nconst handleSubmit = async () => {\n    if (validateForm()) {\n        try {\n            isLoading.value = true\n            // Simple email validation\n            if (!email.value.includes('@')) {\n                error.value = 'Please enter a valid email address'\n                isLoading.value = false\n                return\n            }\n\n            // Handle password reset logic here\n            console.log({ email: email.value })\n            submitted.value = true\n        }\n        catch (error) {\n            console.error('Login error:', error)\n        }\n        finally {\n            isLoading.value = false\n        }\n    }\n}\n\nconst handleBack = () => {\n    submitted.value = false\n    email.value = ''\n    error.value = ''\n}\n</script>\n",
      "type": "registry:block"
    }
  ]
}